X509 класс     


X509Extension.h

//---------------------------------------------------------------------------
#ifndef X509ExtensionH
#define X509ExtensionH

#include <openssl/asn1.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
//---------------------------------------------------------------------------
int X509_set_SerialNumber(X509 *x509);
int X509_set_Validity(X509* x509, float year);
int X509_set_AuthorityKeyIdentifier(X509* x509, X509* ca);
int X509_set_SubjectKeyIdentifier(X509* x509);
int X509_set_SubjectKeyIdentifier(X509* x509, ASN1_OCTET_STRING* skid);
int X509_set_IssuerAltName(X509* x509, X509* ca);
int X509_set_SubjectAltName(X509* x509, GENERAL_NAMES* altName);
int X509_set_SubjectAltName(X509* x509, unsigned char* name, int length);
int X509EXT_set_BasicConstraints(X509* x509, bool ca, int pathlen);
int X509EXT_add_KeyUsage(X509* x509, unsigned short usageBits);
int X509EXT_set_KeyUsage(X509* x509, unsigned short usageBits);
int X509EXT_add_ExtKeyUsage_by_NID(X509* x509, int nid);
int X509EXT_add_ExtKeyUsage_by_OBJ(X509* x509, ASN1_OBJECT* obj);
int X509EXT_set_ExtKeyUsage(X509* x509, EXTENDED_KEY_USAGE* extKeyUsage);
//---------------------------------------------------------------------------
#endif

X509Extension.cpp

//---------------------------------------------------------------------------
#include <ctime>
#include <openssl/safestack.h>
using namespace std;
#include "X509Extension.h"
//---------------------------------------------------------------------------
int X509_set_SerialNumber(X509 *x509)
{
 int       ret = 0;
 unsigned int    hashlen;
 unsigned char    sha_hash[SHA_DIGEST_LENGTH];
 unsigned char    name_hash[SHA_DIGEST_LENGTH];
 unsigned char    pubkey_hash[SHA_DIGEST_LENGTH];
 ASN1_INTEGER*    serialNumber = NULL;

 ret = X509_NAME_digest(X509_get_subject_name(x509), EVP_sha1(), name_hash, &hashlen);
 if(0 == ret)    goto end;
 X509_pubkey_digest(x509, EVP_sha1(), pubkey_hash, &hashlen);
 if(0 == ret)    goto end;
 for(int i=0; i<SHA_DIGEST_LENGTH; ++i) {
  sha_hash[i] = name_hash[i] ^ pubkey_hash[i];
 }

 serialNumber = ASN1_INTEGER_new();
 if(NULL == serialNumber) goto end;

 ASN1_OCTET_STRING_set(serialNumber, sha_hash, SHA_DIGEST_LENGTH);
 ret = X509_set_serialNumber(x509, serialNumber);

end:
 ASN1_INTEGER_free(serialNumber);

 return ret;
}
//---------------------------------------------------------------------------
int X509_set_Validity(X509* x509, float year)
{
 int       ret = 0;
 time_t      currtime;

 time(&currtime);
 ret = X509_set_notBefore(x509, ASN1_TIME_set(NULL, currtime - 5*60/*5min*/));
 if(0 == ret)    goto end;
 ret = X509_set_notAfter(x509, ASN1_TIME_set(NULL, currtime + year*365.25*86400));
// if(0 == ret)    goto end;

end:
 return ret;
}
//---------------------------------------------------------------------------
int X509_set_AuthorityKeyIdentifier(X509* x509, X509* ca)
{
 int       ret = 0;
 AUTHORITY_KEYID*    akid;
 GENERAL_NAME*    genName;
 X509_NAME*     x509Name;

 akid = AUTHORITY_KEYID_new();
 if(NULL == akid)   goto end;

 akid->serial = ASN1_INTEGER_dup(X509_get_serialNumber(ca));

/* akid->issuer = GENERAL_NAMES_new();
 genName = GENERAL_NAME_new();
 genName->type = GEN_DIRNAME;
 genName->d.directoryName = X509_NAME_dup(X509_get_subject_name(ca));
 sk_GENERAL_NAME_push(akid->issuer, genName);*/

 akid->keyid = (ASN1_OCTET_STRING*)X509_get_ext_d2i(ca
  , NID_subject_key_identifier, NULL, NULL);

 ret = X509_add1_ext_i2d(x509, NID_authority_key_identifier
  , akid, false, X509V3_ADD_DEFAULT);
 
end:
 AUTHORITY_KEYID_free(akid);
 return ret;
}
//---------------------------------------------------------------------------
int X509_set_SubjectKeyIdentifier(X509* x509)
{
 int       ret = 0;
 unsigned int    len;
 unsigned char    sha_hash[SHA_DIGEST_LENGTH];
 ASN1_OCTET_STRING*   skid = NULL;

 skid = ASN1_OCTET_STRING_new();
 if(NULL == skid)   goto end;

 X509_pubkey_digest(x509, EVP_sha1(), sha_hash, &len);
 ASN1_OCTET_STRING_set(skid, sha_hash, SHA_DIGEST_LENGTH);
 ret = X509_set_SubjectKeyIdentifier(x509, skid);

end:
 ASN1_OCTET_STRING_free(skid);

 return ret;
}
//---------------------------------------------------------------------------
int X509_set_SubjectKeyIdentifier(X509* x509, ASN1_OCTET_STRING* skid)
{
 return X509_add1_ext_i2d(x509, NID_subject_key_identifier
  , skid, false, X509V3_ADD_DEFAULT);
}
//---------------------------------------------------------------------------
int X509_set_IssuerAltName(X509* x509, X509* ca)
{
 int       ret = 0;
 GENERAL_NAME*    altName;

 altName = (GENERAL_NAME*)X509_get_ext_d2i(ca, NID_subject_alt_name, NULL, NULL);
 if(NULL != altName) {
  ret = X509_add1_ext_i2d(x509, NID_issuer_alt_name
   , altName, false, X509V3_ADD_DEFAULT);
 }

 return ret;
}
//---------------------------------------------------------------------------
int X509_set_SubjectAltName(X509* x509, GENERAL_NAMES* altName)
{
 return X509_add1_ext_i2d(x509, NID_subject_alt_name
  , altName, false, X509V3_ADD_DEFAULT);
}
//---------------------------------------------------------------------------
int X509_set_SubjectAltName(X509* x509, unsigned char* name, int length)
{
 GENERAL_NAMES*    altName = GENERAL_NAMES_new();
 GENERAL_NAME*    genName = GENERAL_NAME_new();

 genName->type = GEN_OTHERNAME;
 genName->d.otherName = OTHERNAME_new();
 genName->d.otherName->type_id = OBJ_txt2obj("1.3.6.1.4.1.14117.2.2", true);
 genName->d.otherName->value->type = V_ASN1_UTF8STRING;
 genName->d.otherName->value->value.utf8string = ASN1_UTF8STRING_new();
 ASN1_STRING_set(genName->d.otherName->value->value.utf8string, name, length);

 sk_GENERAL_NAME_push(altName, genName);

 return X509_set_SubjectAltName(x509, altName);
}
//---------------------------------------------------------------------------
int X509EXT_set_BasicConstraints(X509* x509, bool ca, int pathlen)
{
 int       ret = 0;
 BASIC_CONSTRAINTS*   basicConstraints;

 basicConstraints = BASIC_CONSTRAINTS_new();
 if(NULL == basicConstraints) goto end;

 basicConstraints->ca = ca;
 if(ca && -1!=pathlen) {
  basicConstraints->pathlen = ASN1_INTEGER_new();
  ASN1_INTEGER_set(basicConstraints->pathlen, pathlen);
 }
 ret = X509_add1_ext_i2d(x509, NID_basic_constraints
  , basicConstraints, true, X509V3_ADD_DEFAULT);
 
end:
 BASIC_CONSTRAINTS_free(basicConstraints);

 return ret;
}
//---------------------------------------------------------------------------
int X509EXT_add_KeyUsage(X509* x509, unsigned short usageBits)
{
 int       ret = 0;
 ASN1_BIT_STRING*   keyUsage = NULL;
 ASN1_BIT_STRING*   keyUsageBits = NULL;

 keyUsageBits = ASN1_BIT_STRING_new();
 if(NULL == keyUsageBits) goto end;

 ASN1_BIT_STRING_set(keyUsageBits, (unsigned char*)&usageBits, sizeof(usageBits));

 keyUsage = (ASN1_BIT_STRING*)X509_get_ext_d2i(x509
  , NID_key_usage, NULL, NULL);
 if(NULL == keyUsage) {
  keyUsage = ASN1_BIT_STRING_new();
  if(NULL == keyUsage) goto end;
 }

 for(unsigned int i=1; i<=16; ++i) {
  if(ASN1_BIT_STRING_get_bit(keyUsageBits, i)) {
   ASN1_BIT_STRING_set_bit(keyUsage, i, 1);
  }
 }

 ret = X509_add1_ext_i2d(x509, NID_key_usage
  , keyUsage, true, X509V3_ADD_REPLACE);

end:
 ASN1_BIT_STRING_free(keyUsage);
 ASN1_BIT_STRING_free(keyUsageBits);

 return ret;
}
//---------------------------------------------------------------------------
int X509EXT_set_KeyUsage(X509* x509, unsigned short usageBits)
{
 int       ret = 0;
 ASN1_BIT_STRING*   keyUsage = NULL;

 keyUsage = ASN1_BIT_STRING_new();
 if(NULL == keyUsage)  goto end;

 ASN1_BIT_STRING_set(keyUsage, (unsigned char*)&usageBits, sizeof(usageBits));
 ret = X509_add1_ext_i2d(x509, NID_key_usage
  , keyUsage, true, X509V3_ADD_DEFAULT);

end:
 ASN1_BIT_STRING_free(keyUsage);

 return ret;
}
//---------------------------------------------------------------------------
int X509EXT_add_ExtKeyUsage_by_NID(X509* x509, int nid)
{
 return X509EXT_add_ExtKeyUsage_by_OBJ(x509, OBJ_nid2obj(nid));
}
//---------------------------------------------------------------------------
int X509EXT_add_ExtKeyUsage_by_OBJ(X509* x509, ASN1_OBJECT* obj)
{
 int       ret = 0;
 EXTENDED_KEY_USAGE*   extKeyUsage = NULL;

 extKeyUsage = (EXTENDED_KEY_USAGE*)X509_get_ext_d2i(x509
  , NID_ext_key_usage, NULL, NULL);
 if(NULL == extKeyUsage) {
  extKeyUsage = EXTENDED_KEY_USAGE_new();
  if(NULL == extKeyUsage) goto end;
 }
 sk_ASN1_OBJECT_push(extKeyUsage, obj);
 ret = X509_add1_ext_i2d(x509, NID_ext_key_usage
  , extKeyUsage, false, X509V3_ADD_REPLACE);

end:
 EXTENDED_KEY_USAGE_free(extKeyUsage);
 
 return ret;
}
//---------------------------------------------------------------------------
int X509EXT_set_ExtKeyUsage(X509* x509, EXTENDED_KEY_USAGE* extKeyUsage)
{
 return X509_add1_ext_i2d(x509, NID_ext_key_usage
  , extKeyUsage, 0, X509V3_ADD_DEFAULT);
}
//---------------------------------------------------------------------------



Trackback: http://tb.blog.csdn.net/TrackBack.aspx?PostId=26864