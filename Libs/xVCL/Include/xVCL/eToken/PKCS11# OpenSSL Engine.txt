PKCS11# OpenSSL Engine класс    

 
PKIP11Engine.h 

//---------------------------------------------------------------------------

#ifndef PKIP11EngineH
#define PKIP11EngineH

#include <openssl/rsa.h>
#include <openssl/rand.h>
//===========================================================================
int PKCS11_rsa_init(
    RSA*                        rsa
);
int PKCS11_rsa_finish(
    RSA*                        rsa
);
int PKCS11_rsa_priv_enc(
    int                         flen
    , const unsigned char*      from
    , unsigned char*            to
    , RSA*                      rsa
    , int                       padding
);
int PKCS11_rsa_priv_dec(
    int                         flen
    , const unsigned char*      from
    , unsigned char*            to
    , RSA*                      rsa
    , int                       padding
);
//---------------------------------------------------------------------------
static const RSA_METHOD PKCS11_rsa_method =
{
    "PKCS#11 RSA method"        //! name
    , NULL                      //! rsa_pub_enc
    , NULL                      //! rsa_pub_dec
    , PKCS11_rsa_priv_enc       //! rsa_priv_enc
    , PKCS11_rsa_priv_dec       //! rsa_priv_dec
    , NULL                      //! rsa_mod_exp
    , BN_mod_exp_mont           //! bn_mod_exp
    , PKCS11_rsa_init           //! init
    , PKCS11_rsa_finish         //! finish
    , RSA_METHOD_FLAG_NO_CHECK  //! flags
    , NULL                      //! app_data
    , NULL                      //! rsa_sign
    , NULL                      //! rsa_verify 
};
//===========================================================================
#endif


PKIP11Engine.cpp

 

//---------------------------------------------------------------------------
#pragma hdrstop

#include "PKIError.h"
#include "PKIObject.h"
#include "PKIP11Engine.h"
//---------------------------------------------------------------------------
int PKCS11_rsa_init(RSA* rsa)
{
    return 1;
}
//---------------------------------------------------------------------------
int PKCS11_rsa_finish(RSA* rsa)
{
    return 1;
}
//---------------------------------------------------------------------------
int PKCS11_rsa_priv_enc(int flen, const unsigned char* from
    , unsigned char* to, RSA* rsa, int padding)
{
    CK_ULONG                    signlen = (CK_ULONG)RSA_size(rsa);
    PKI_RSAPrivateKey*          privkey;

    privkey = (PKI_RSAPrivateKey*)RSA_get_ex_data(rsa, 0);
    if(NULL == privkey)         return -1;

    AssertObjectRv(privkey->SignInit());
    AssertObjectRv(privkey->Sign(const_cast<unsigned char*>(from), flen, to, &signlen));

    return signlen;
}
//---------------------------------------------------------------------------
int PKCS11_rsa_priv_dec(int flen, const unsigned char* from
    , unsigned char* to, RSA* rsa, int padding)
{
    CK_ULONG                    declen = (CK_ULONG)RSA_size(rsa);
    PKI_RSAPrivateKey*          privkey;

    privkey = (PKI_RSAPrivateKey*)RSA_get_ex_data(rsa, 0);
    if(NULL == privkey)         return -1;

    AssertObjectRv(privkey->DecryptInit());
    AssertObjectRv(privkey->Decrypt(const_cast<unsigned char*>(from), flen, to, &declen));
    
    return declen;
}
//---------------------------------------------------------------------------





Trackback: http://tb.blog.csdn.net/TrackBack.aspx?PostId=26884
