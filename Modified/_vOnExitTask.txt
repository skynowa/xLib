//---------------------------------------------------------------------------
//TODO: - _vOnExitTask ()
template<class TaskT>
VOID CXThreadPool<TaskT>::_vOnExitTask(CXThread *pthSender)  {
	/*DEBUG*///XASSERT_RET(CONDITION, RET_VALUE); 

    TaskT *pthThis = static_cast<TaskT *>(pthSender);
	/*DEBUG*/XASSERT_DO(NULL != pthThis, return);

	////HandlersPool::iterator Iter = _m_vecpthWorkThreads.find(msg);
	////if (Iter != Handlers.end())
	////	Handlers.erase(Iter);


	////{
	////	CXCriticalSectionScopeLock CS(_m_csList);

	////	/*DEBUG*/XASSERT_DO(false == _m_lstpthTasks.empty(), return);
	////	
	////	std::list<TaskT *>::iterator it = std::find(_m_lstpthTasks.begin(), _m_lstpthTasks.end(), pthThis);
	////	/*DEBUG*/XASSERT_DO(_m_lstpthTasks.end() != it, return);
	////
	////	_m_lstpthTasks.erase(it);
	////}
	{
		CXCriticalSectionScopeLock CS(_m_csList);

		/*DEBUG*/XASSERT_DO(false == _m_lstpthTasks.empty(), return);
		_m_lstpthTasks.remove(pthThis);
	}







	BOOL bRes = FALSE;

	bRes = bPushTask(NULL);	//if (TRUE == bRes)		//bRelease
	/*DEBUG*/XASSERT_DO(FALSE != bRes, return);

	/*LOG*/////_m_clLog.bWrite(_T("_vOnExitTask: #%i"), pthThis->m_uiIndex);
}
//---------------------------------------------------------------------------