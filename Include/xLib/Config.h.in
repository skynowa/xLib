/**
 * \file  Config_gen.h
 * \brief configurations for xLib
 */


#pragma once

//-------------------------------------------------------------------------------------------------
///@name project type: executable binary, static library, share (dynamic-link) library
///@{
#cmakedefine cmOPTION_PROJECT_LIB_STATIC 1
#cmakedefine cmOPTION_PROJECT_LIB_SHARE 1
#cmakedefine cmOPTION_PROJECT_LIB_MODULE 1
///@}

#cmakedefine cmOPTION_BUILD_MSG 1
    ///< build message

///@name debug mode (only one mode can be activated)
///@{
// log mode (only one mode can be activated)
#cmakedefine cmOPTION_DEBUG_MODE_MSGBOX 1
    ///< debug mode "message box"
#cmakedefine cmOPTION_DEBUG_MODE_STDOUT 1
    ///< debug mode "std::cout"
#cmakedefine cmOPTION_DEBUG_MODE_LOG 1
    ///< debug mode "logging"
#cmakedefine cmOPTION_DEBUG_MODE_STDOUT_LOG 1
    ///< debug mode "std::cout and log"
#cmakedefine cmOPTION_DEBUG_MODE_EXCEPTION 1
    ///< debug mode "no debugging"
#cmakedefine cmOPTION_DEBUG_MODE_NO 1
    ///< debug mode "no debugging"
///@}

///@name tests
///@{
#cmakedefine cmOPTION_TEST_PRIVATE 1
    ///< for tests private data
#cmakedefine cmOPTION_TEST_TRACING 1
    ///< use tracing in tests
///@}

//-------------------------------------------------------------------------------------------------
#cmakedefine CMAKE_BUILD_TYPE xT("@CMAKE_BUILD_TYPE@")

///@name Git information
///@{
#cmakedefine cmGIT_REVISION_FOUND 1
#cmakedefine cmGIT_REVISION_BRANCH xT("@cmGIT_REVISION_BRANCH@")
#cmakedefine cmGIT_REVISION_HASH xT("@cmGIT_REVISION_HASH@")
///@}

#cmakedefine cmXLIB_COMPILER_FLAGS xT("@cmXLIB_COMPILER_FLAGS@")
    ///< Compiler flags
#cmakedefine cmXLIB_LIBRARIES      xT("@cmXLIB_LIBRARIES@")
    ///< xLib linked libraries
#cmakedefine cmCMAKE_VERSION       xT("@cmCMAKE_VERSION@")
    ///< CMake version

///@name detecting features
///@{

// Headers
#cmakedefine cmHAVE_FEATURES_H 1

#cmakedefine cmOPENSSL_CRYPTO_FOUND 1
#cmakedefine cmHAVE_PR_SET_DUMPABLE 1
#cmakedefine cmHAVE_RLIMIT_CORE 1
#cmakedefine cmHAVE_PT_DENY_ATTACH 1
#cmakedefine cmHAVE_SCHED_GETCPU 1
#cmakedefine cmHAVE_GETCPU 1
#cmakedefine cmHAVE_GETLOGIN_R 1
#cmakedefine cmGNU_GET_LIBC_FOUND 1
#cmakedefine cmCS_GNU_LIBPTHREAD_VERSION_FOUND 1
#cmakedefine cmHAVE_SCHED_SETAFFINITY 1
#cmakedefine cmHAVE_GETSID 1
#cmakedefine cmHAVE_GETPWUID_R 1
#cmakedefine cmHAVE_SETMNTENT 1
#cmakedefine cmHAVE_GETMNTENT_R 1
#cmakedefine cmHAVE_ENDMNTENT 1
#cmakedefine cmHAVE_RAND_R 1
#cmakedefine cmHAVE_SRANDOM_R 1
#cmakedefine cmHAVE_RANDOM_R 1

#cmakedefine cmMYSQL_FOUND 1
#cmakedefine cmEXECINFO_FOUND 1
#cmakedefine cmXCB_FOUND 1
#cmakedefine cmADDR2LINE_FOUND 1
#cmakedefine cmADDR2LINE_FILE_PATH xT("@cmADDR2LINE_FILE_PATH@")
///@}

//-------------------------------------------------------------------------------------------------
///@name OS specific defines
///@{
#if   xENV_WIN
    #if xCOMPILER_MS
        #include <SDKDDKVer.h>
    #endif

    #if !defined(WIN32_LEAN_AND_MEAN)
        #define WIN32_LEAN_AND_MEAN 1
    #endif
        ///< exclude APIs such as Cryptography, DDE, RPC, Shell, Windows Sockets
    #if !defined(STRICT)
        #undef  NO_STRICT
        #define STRICT 1
    #endif
        ///< type checking
    #define _CRT_SECURE_NO_WARNINGS 1
        ///< disable Win CRT warnings
    #define _SCL_SECURE_NO_WARNINGS 1
        ///< disable Win SCL warnings
    #define _CRT_SECURE_NO_DEPRECATE 1
        ///< don't complain about all the deprecated functions

    #if xCOMPILER_MS
        #if !defined(VC_EXTRALEAN)
            #define VC_EXTRALEAN 1
        #endif
            ///< exclude rarely-used stuff from Windows headers
    #endif
#elif xENV_UNIX
    #if !defined(_GNU_SOURCE)
        #define _GNU_SOURCE 1
    #endif
#endif
///@}
//-------------------------------------------------------------------------------------------------
