/**
 * \file  Random.cpp
 * \brief random generator
 */


#if !cmOPTION_PROJECT_HEADER_ONLY
    #include "Random.h"
#endif

#include <xLib/Core/Functions.h>
#include <xLib/Core/Utils.h>
#include <xLib/Test/Test.h>
#include <xLib/Debug/Debug.h>
#include <xLib/Debug/NativeError.h>
#include <xLib/Debug/StdError.h>
#include <xLib/Debug/ErrorReport.h>
#include <xLib/Debug/Debugger.h>
#include <xLib/Debug/StackTrace.h>
#include <xLib/Log/Trace.h>

#if   xENV_WIN
    #include "Platform/Win/Random_win.inl"
#elif xENV_UNIX
    #include "Platform/Unix/Random_unix.inl"

    #if   xENV_LINUX

    #elif xENV_BSD

    #elif xENV_APPLE

    #endif
#endif


xNAMESPACE_BEGIN2(xlib, crypt)

/**************************************************************************************************
*    ISeedPolicy
*
**************************************************************************************************/

//-------------------------------------------------------------------------------------------------
xINLINE
ISeedPolicy::ISeedPolicy() :
    _seed(0U)
{
    _seed = _seedTimeBased();
}
//-------------------------------------------------------------------------------------------------
xINLINE uint_t
ISeedPolicy::_seedTimeBased() const
{
    timeval tv = {0, 0};
    int_t iRv = ::gettimeofday(&tv, xPTR_NULL);
    xTEST_DIFF(iRv, - 1);

    return static_cast<uint_t>( tv.tv_usec );
}
//-------------------------------------------------------------------------------------------------
/* static */
xINLINE long_t
ISeedPolicy::valueMax()
{
   /**
    * FAQ: RAND_MAX
    *
    * Maximum possible value generated by std::rand (int)
    * This value is library-dependent, but is guaranteed to be at least 32767 on any standard
    * library implementation
    */

    return static_cast<int>( RAND_MAX );
}
//-------------------------------------------------------------------------------------------------


/**************************************************************************************************
*    StdSeedPolicy
*
**************************************************************************************************/

//-------------------------------------------------------------------------------------------------
xINLINE
StdSeedPolicy::StdSeedPolicy() :
    ISeedPolicy()
{
    _construct_impl();
}
//-------------------------------------------------------------------------------------------------
/* virtual */
xINLINE
StdSeedPolicy::~StdSeedPolicy()
{
}
//-------------------------------------------------------------------------------------------------
/* virtual */
xINLINE long_t
StdSeedPolicy::next()
{
    return _next_impl();
}
//-------------------------------------------------------------------------------------------------


/**************************************************************************************************
*    NativeSeedPolicy
*
**************************************************************************************************/

//-------------------------------------------------------------------------------------------------
xINLINE
NativeSeedPolicy::NativeSeedPolicy() :
    ISeedPolicy()
{
    _construct_impl();
}
//-------------------------------------------------------------------------------------------------
/* virtual */
xINLINE
NativeSeedPolicy::~NativeSeedPolicy()
{
    _destruct_impl();
}
//-------------------------------------------------------------------------------------------------
/* virtual */
xINLINE long_t
NativeSeedPolicy::next()
{
    return _next_impl();
}
//-------------------------------------------------------------------------------------------------

xNAMESPACE_END2(xlib, crypt)
