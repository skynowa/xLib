Editor:

- Sublime config Preferences.sublime-settings
- intend size:
  1 tab
- line length:
  120
- file encoding:
  UTF-8
- line ending:
  Unix
- class member visibility order:
  public, protected, private
- function parameters order:
  input first (const by reference)
- output params pass by:
  reference
- remove trailing whitespace:
  in all lines
  in edited lines
- newline at the end of file

for, if:

- always braces

// BAD
if ()
    continue;

// GOOD
if () {
    continue;
}
- braces position

if () {
    // ...
}

for ( ; ; ) {
    // ...
}
- no nested if

// BAD
void foo (const bool is_var1, const bool is_var2)
{
    if (is_var1) {
        if (is_var2) {
            // ...
        }
    }
}

// GOOD
void foo (const bool is_var1, const bool is_var2)
{
    if ( !is_var1 ) {
        return;
    }

    if ( !is_var2 ) {
        return;
    }

    // ..
}
- if with explicit condition (apart from bool type)

char *ptr = &str;
int   i   = 0;

// BAD
if (ptr) {
    // ...
}
if (i) {
    // ...
}

// GOOD
if (ptr != nullptr) {
    // ...
}
if (i > 0) {
    // ...
}
- use spaces

// BAD
for (int i=0; i<10; ++i) {
    // ...
}

// GOOD
for (int i = 0; i < 10; ++ i) {
    // ...
}

Naming:

- files:
  low_case
- typedef with "_t":
  typedef vector<string> csv_line_t;
- class, struct, union, enum:
  UpperCamelCase
- functions, methods:
  lowCamelCase
- variables (+ constants), class members:
  low_case
- macros:
  UPPER_CASE
- measure units postfix:
  timeout_sec, size_bytes, ..

// files:
#include <services/merge_service_v2.h>

// typedef with "_t":
typedef vector<string> csv_line_t;
using room_rate_t = map<string, string>;

// class, struct, union, enum:
class PayPalFunc
{
};

enum class CodeStyleType
{
    Unknown = 0,
    Good    = 1,
    Bad     = 2,
    Mixed   = 3
};

// functions, methods:
void processBookedHotels();

// variables (+ constants), class members:
size_t       hotels_count;
const size_t pax_number;

// macros:
#define MOBILE_PROJECT 1

// measure units postfix:
time_t  timeout_sec     = 300;
size_t  file_size_bytes = getFileSizeBytes();
size_t  distance_km     = 10;
int32_t price_usd       = 700;

Prefixes:


“ _” - private member of some data structure

TWTSLite *_wts;
“ a_” - function param (optional rule)

void foo(const Date &a_date);
“ it_” - iterator

for (auto &it_stat : stats) {
    // ...
}
“is” - for boolean variables/function

bool is_valid = false;
bool isValid() const;


Comments:



- remove "dead" code


Etc:


- no C-cast, use C++ casts

- don't use default function's parameters

- Init simple type (bool, interger, double, pointer) class members with "{}":

class A
{
public:
  bool  is_valid {};
  int   count {};
  float percent {};
  TWTS *wts_big {};

  A()
    {
    }
};
- base (parent) classes

for services - WTSService (libwts3/WTSService.h)
for modules - WTSModule (libwts3/WTSModule.h)
for functions - WTSFunc (libwts3/WTSFunc.h)
- don't use exceptions



Doxygen:


http://www.stack.nl/~dimitri/doxygen/manual/index.html
http://habrahabr.ru/post/252101/
http://habrahabr.ru/post/252443/

To generate documentation use triptake-all/generate_doc.sh script.

Config file: triptake-all/Doxyfile.

Plugin for Sublime Text: DoxyDoxygen.

Settings for DoxyDoxygen:

{
    "doxygen_command_prefix":"\\",
    "preferred_comments_styles":[
        [
            "/*!",
            " ",
            "*/"
        ],
        [
            "//!",
            " ",
            "*/"
        ]
    ],
    "block_layout_default":{
        "Doxygen":[
            {
                "tags":[
                    "@brief",
                    " ",
                    " ",
                    "@param"
                    //"",
                    //"@retval",
                    //"",
                    //"@throws",
                    //"",
                    //"@pre",
                    //"",
                    //"@post",
                    //"",
                    //"@attention",
                    //"",
                    //"@bug",
                    //"",
                    //"@warning",
                    //"",
                    //"@todo",
                ],
                "context":[
                    {
                        "key":"kind",
                        "operator":"not_equal",
                        "operand":""
                    }
                ]
            }
        ]
    }
}


XML objects documentation:

Object description example:

<module>
     <name>BookedHotel</name>
     <mname>BookedHotels</mname>
     <description>Booked hotels.</description>

    ...

Comment for field:

<field>

   <name>MergeStatus</name>
   <type>select</type>
   <label>MergeStatus</label>
   <description>Merge status (hotels, destinations)</description>

   ....



Variants for enum fields:

<variants>
    <variant>
     <name>Unknown</name>
     <ename>Unknown</ename>
     <value>0</value>
     <description>Unknown (default)</description>
    </variant>

...



Class method documentation example:

 <class_method_c>
      <rettype>int</rettype>
      <declaration>
      <![CDATA[
           getHotelPhotos(
                string& result,   ///&lt; [out] result
                int     response_type ///&lt; response type
           )
     ]]>
     </declaration>
  <description>get hotel photos</description>



Git:

- line length:
  120
- single line:
  [module]: [comments]
- multi line:
  [module]: [brief comments]

  [full comments]

- branch naming:
  TRAVEL-1234-some-short-description

